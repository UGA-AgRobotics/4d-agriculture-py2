import os
import tkinter as tk
from tkinter import filedialog
from numpy import savetxt, concatenate, expand_dims
from numpy.random import rand
from PIL import Image

import config

# Prompt the user for a path to create data structure in
master = tk.Tk()
f = filedialog.askdirectory(title="Select DataPath Location")
print("Data Path: " + f)

# Create TopLevel sub-folders
print("Creating Folders")
try:
    if not os.path.exists(f + r"/2015_height_data"):
        os.makedirs(f + r"/2015_height_data")
    if not os.path.exists(f + r"/rover_path_data"):
        os.makedirs(f + r"/rover_path_data")
    if not os.path.exists(f + r"/stress_maps"):
        os.makedirs(f + r"/stress_maps")
except OSError:
    print("Error Creating Directories.")

# Create Sample data in 2015_height_data
print("Creating Sample Data")
fname1 = f + r"/2015_height_data/height_070115.csv"
fname2 = f + r"/2015_height_data/height_070815.csv"
fname3 = f + r"/2015_height_data/height_071515.csv"
data = rand(800, 800)
savetxt(fname1, data, delimiter=',')
data = rand(800, 800)
savetxt(fname2, data, delimiter=',')
data = rand(800, 800)
savetxt(fname3, data, delimiter=',')

# Create white "satellite image" background
print("Creating sample satellite image")
image_path = f + r"/2015_height_data/field_sat_2015.png"
image = Image.new('RGB', (100, 100), color=(0, 150, 0))
image.save(image_path, "PNG")

# Create config files
print("Creating config files")
config_path_global = f + r"/config.ini"
config_path_yearly = f + r"/2015_height_data/config.ini"
config_global = config.create_config_global(config_path_global)
config.create_config_yearly(config_path_yearly)

config_global["Path"]["DataPath"] = f
config_global["GPS"]["origin_lat"] = "33.772361"
config_global["GPS"]["origin_lng"] = "-84.39472"

with open(config_path_global, 'w') as config_file:
    config_global.write(config_file)

# Create dummy gps path
print("Creating sample gps rover path")
gps_origin = [33.772361, -84.39472, 301]
gps_origin = expand_dims(gps_origin, axis=1)
gps_points = gps_origin
for i in range(100):
    point = gps_origin
    point[0] = gps_origin[0] - (i / 1000000)
    gps_points = concatenate((gps_points, point), axis=1)
gps_origin = expand_dims(gps_points[:, -1], axis=1)
for i in range(100):
    point = gps_origin
    point[1] = gps_origin[1] - (i / 1000000)
    gps_points = concatenate((gps_points, point), axis=1)

# Save dummy gps path to csv file
print("Creating README file")
gps_path = f + r"/rover_path_data/gps_info_2015.csv"
savetxt(gps_path, gps_points.T, delimiter=',', comments='',
        header=r"field.latitude,field.longitude,field.altitude")

# Create text README file
readme_path = f + "/README.txt"
readme = open(readme_path, mode='w')
readme.write(r"""Point Selection Data Directory Structure:

In order for the point selection gui to properly read in the available data, it needs to be structured in the following manner.

-Main Data Folder (Can be named anything) - This is what is input to the gui's DataPath attribute
	- 20xx_height_data - Folder containing all of the information for a single year's crop
		- config.ini - Year specific config file (optional) - overwrites global config
		- field_sat_20xx.png - Satellite image file for this specific plot
		- height_MMDDYY.csv - Raw height data snapshot
		- 20xx_height_data.npy - Numpy file to save load time, autogenerated on first use
	- rover_path_data - Folder containing rover path points for each year
		- gps_info_20xx.csv - Rover path gps coordinates for a specific year
	- stress_maps - Default output folder for the 'export stress map' button
	- config.ini - Global config file, used when a year doesn't have a specific configuration
	- README.txt - This README file explaining data structure

In order to create a skeleton of the data hierarchy, run data_setup.py and provide a path to preferred main data folder. The script will setup the necessary folders and will provide a copy of this README""")
readme.close()
print("Finished creating data structure")

master.destroy()
